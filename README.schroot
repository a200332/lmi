# Create a chroot for cross-building "Let me illustrate...".
#
# Copyright (C) 2016, 2017, 2018, 2019 Gregory W. Chicares.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
#
# http://savannah.nongnu.org/projects/lmi
# email: <gchicares@sbcglobal.net>
# snail: Chicares, 186 Belle Woods Drive, Glastonbury CT 06033, USA

# Create a chroot for cross-building lmi--with wine, which is
# required to run programs built in the chroot.

# Log in as the user that will normally use the chroot.
# Substitute that user's name wherever 'greg' appears below.

# Temporarily enter a root shell.
su
apt-get update
apt-get install schroot debootstrap

# Download all OS essentials. This step may be done a single time, and
# its tarball used repeatedly. The target ('/tmp/eraseme') directory
# will be created and erased automatically.
debootstrap --arch=amd64 --make-tarball=/var/cache/buster_bootstrap.tar buster /tmp/eraseme

# Unpack the OS tarball into the particular chroot being created.
# (If the preceding apt-get and debootstrap steps have already been
# completed once, then skip them and start here.)
mkdir -p /srv/chroot/lmi-buster
debootstrap --arch=amd64 --unpack-tarball=/var/cache/buster_bootstrap.tar \
 buster /srv/chroot/lmi-buster >lmi-buster-debootstrap-log 2>&1

# This command should produce no output:
grep --invert-match '^I:' lmi-buster-debootstrap-log

cat >/etc/schroot/chroot.d/lmi-buster.conf <<\EOF
[lmi-buster]
description=debian buster cross build
directory=/srv/chroot/lmi-buster
users=greg
groups=greg
root-groups=root
type=plain
EOF

# Exit root shell (return to normal shell).
exit

# This command--to start a root shell in the chroot--can be run as a
# normal user. It will prompt for the root password.

schroot --chroot=lmi-buster --user=root --directory=/
# enter password

# Add i386 before installing wine, so that wine can run 32-bit .exe's .

dpkg --add-architecture i386

# Prevent daemons from starting in the chroot; work around an
# 'ischroot' defect. See:
#   https://wiki.debian.org/chroot#Configuration

cat >/usr/sbin/policy-rc.d <<EOF
#!/bin/sh
exit 101
EOF

chmod a+x /usr/sbin/policy-rc.d

dpkg-divert --divert /usr/bin/ischroot.debianutils --rename /usr/bin/ischroot
ln -s /bin/true /usr/bin/ischroot

# This being a "plain" schroot, mount essential directories:
mount -t devpts -o rw,nosuid,noexec,relatime,mode=600 devpts /dev/pts
mount -t proc -o rw,nosuid,nodev,noexec,relatime proc /proc

# If the chroot is to be permanent, consider adding those mounts to /etc/fstab .
# If the chroot is ever to be eradicated, be sure to unmount first:
# ...inside chroot:
#   umount ./dev/pts
#   umount ./proc
# ...or outside chroot:
#   umount /srv/chroot/lmi-buster/dev/pts/
#   umount /srv/chroot/lmi-buster/proc/
# Then, and only then:
#   rm -rf /srv/chroot/lmi-buster/
#   rm /etc/schroot/chroot.d/lmi-buster.conf

apt-get update
apt-get --assume-yes install wget g++-mingw-w64 automake libtool make \
 pkg-config git cvs zsh bzip2 unzip sudo wine default-jre jing trang \
 g++-multilib libxml2-utils libxslt1-dev vim-gtk vim-doc shellcheck \
 xsltproc \
 >lmi-buster-apt-get-log 2>&1

# This command should produce little output:
<lmi-buster-apt-get-log sed -e'0,/^Preconfiguring/d' \
 -e'/^Fetched\|^Preparing\|^Unpacking\|^Configuring\|^Selecting/d' \
 -e'/^Setting up\|^Processing\|^Adding\|^update-alternatives\|^[Dd]one./d' \
 -e'/^(Reading database\|^Linking\|^Moving old\|^Regenerating/d' \
 -e'/^Creating config\|^Updating certificates\|^Running hooks/d'
#
# Don't worry about messages like the following--see:
#   http://lists.nongnu.org/archive/html/lmi/2016-09/msg00025.html
#
#   update-rc.d: warning: start and stop actions are no longer supported; falling back to defaults
#   invoke-rc.d: policy-rc.d denied execution of start.
#   No schema files found: doing nothing.
#   Warning: The home dir /run/uuidd you specified can't be accessed: No such file or directory
#   Not creating home directory `/run/uuidd'.

addgroup --gid=1000 greg
adduser --gid=1000 --uid=1000 greg
# enter user password, twice
# then just press Enter repeatedly to accept defaults

mkdir -p /opt/lmi
chown greg:greg /opt/lmi
mkdir -p /etc/opt/lmi
chown greg:greg /etc/opt/lmi
mkdir -p /var/opt/lmi
chown greg:greg /var/opt/lmi
mkdir -p /cache_for_lmi
chown greg:greg /cache_for_lmi

chsh -s /bin/zsh greg
touch /home/greg/.zshrc
chown greg:greg /home/greg/.zshrc

cat >/home/greg/.zshrc <<\EOF
export WINEPATH='Z:\\opt\\lmi\\local\\bin;Z:\\opt\\lmi\\local\\lib'
export LMI_HOST=i686-w64-mingw32
export PATH="/opt/lmi/local/bin:/opt/lmi/local/lib:$PATH"
# At a regular user prompt, outside the chroot, do this:
#   $ echo $DISPLAY
# and replace :0.0 below with the string it returns:
export DISPLAY=":0.0"

export coefficiency='--jobs=32'

# export TZ=UCT
export LANG=en_US.UTF-8 LC_TIME=en_DK.UTF-8 LC_COLLATE=C.UTF-8
# It is generally preferable to do this:
# update-locale LANG=en_US.UTF-8 LC_TIME=en_DK.UTF-8 LC_COLLATE=C.UTF-8
# but neither the chroot's nor the host's /etc/default/locale is
# sourced by schroot, which strives to set as few environment
# variables as possible.

# This ought to be unnecessary because $LANG contains the string
# "UTF-8"--see:
#   https://lists.nongnu.org/archive/html/lmi/2018-03/msg00049.html
# but it seems to be necessary nevertheless.
export LESSCHARSET=utf-8

# bindkey "\e[3~" delete-char      # Del
# bindkey '\e[H' beginning-of-line # Home
# bindkey '\e[F' end-of-line       # End
bindkey "^[[1;5D" backward-word  # Ctrl-left
bindkey "^[[1;5C" forward-word   # Ctrl-right
bindkey '\e[1;3D' backward-word  # Alt-left
bindkey '\e[1;3C' forward-word   # Alt-right
# By default, zsh unfortunately binds ^S for this purpose;
# use ^T instead, leaving ^S for flow control.
bindkey '^T' history-incremental-search-forward

prompt='%d[%?]%(!.#.$)'

HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.history
setopt HIST_IGNORE_DUPS

autoload -U compinit
compinit -u

# This alias is explained in 'tabs/konsole_tabs'.
alias asdf='. ./startup_script'
EOF

# Repair /usr/share/libtool/.../ltmain.sh as indicated here:
#   http://lists.gnu.org/archive/html/libtool-patches/2011-06/msg00001.html
# Do this as root because root owns the file.

cat >/home/greg/ltmain.sh.patch <<\EOF
--- /usr/share/libtool/build-aux/ltmain.sh.orig 2016-08-20 12:34:31.000000000 +0000
+++ /usr/share/libtool/build-aux/ltmain.sh 2017-08-10 13:10:28.466155965 +0000
@@ -5555,7 +5555,7 @@
 /* declarations of non-ANSI functions */
 #if defined __MINGW32__
 # ifdef __STRICT_ANSI__
-int _putenv (const char *);
+_CRTIMP int _putenv (const char *);
 # endif
 #elif defined __CYGWIN__
 # ifdef __STRICT_ANSI__
EOF

patch --dry-run --strip=0 </home/greg/ltmain.sh.patch \
 && patch --strip=0 </home/greg/ltmain.sh.patch

# Configure vim.

# Without this, 'zg' gives an error message; with it, vim creates a
# spellfile the first time 'zg' is used, if none already exists.
mkdir ~/.vim
# It's a much better idea to copy a mature spellfile hither:
# ~/.vim/spell/en.utf-8.add
# and then (imperatively) run this command:
# :mkspell! ~/.vim/spell/en.utf-8.add

cat >~/.vimrc <<\EOF
" This shouldn't be necessary, but it is: $LANG is 'en_US.UTF-8',
" yet vim uses Latin-1 nevertheless.
set encoding=utf-8

set background=dark
highlight clear SpellBad
highlight SpellBad   cterm=underline ctermbg=240 ctermfg=226
highlight clear SpellCap
highlight SpellCap   cterm=underline ctermbg=240 ctermfg=252
highlight clear SpellLocal
highlight SpellLocal cterm=underline ctermbg=240 ctermfg=154
highlight clear SpellRare
highlight SpellRare  cterm=underline ctermbg=240 ctermfg=208

highlight TabLineFill                            ctermfg=16
highlight TabLine                    ctermbg=237 ctermfg=124
highlight TabLineSel                 ctermbg=239 ctermfg=202

" From tpope's 'sensible.vim':
set tabpagemax=50

" Show invisibles: 'eol' and 'tab' are meant to be unobtrusive,
" while 'nbsp' and 'trail' are meant to stand out; 'extends' and
" 'precedes' normally wouldn't be seen because of 'set wrap'.
set list
" On second thought, 'eol' should probably be left alone.
" set listchars=nbsp:◙,eol:☜,tab:☞☞,extends:»,precedes:«,trail:▒
set listchars=nbsp:◙,tab:☞☞,extends:»,precedes:«,trail:▒
highlight clear NonText
highlight NonText    ctermfg=gray " eol, extends, precedes
highlight clear SpecialKey
highlight SpecialKey ctermfg=red  " nbsp, tab, trail

let g:netrw_liststyle=3
map <Tab> <C-W>w

" Prevent gvim cursor from blinking
:set guicursor+=a:blinkon0
EOF

cat >/etc/vim/vimrc.local <<\EOF
set shortmess=Il

noremap <S-Up> <C-Y>
noremap <S-Down> <C-E>

" Counterpart to J
nnoremap K i<Enter><Esc>

" Tab key means ASCII HT (in insert mode)
inoremap <Tab> <C-V><Tab>

set shiftwidth=4
set expandtab

" Not very helpful--use 'scrolloff' instead
" set cursorline

" Always show at least one line above or below the cursor
set scrolloff=1

set cindent
set cinoptions=t0\ g0\ {s\ (0\ U1 comments^=:///

au BufReadPost,BufNewFile *.tpp set ft=cpp
au BufReadPost,BufNewFile *.xpp set ft=cpp
" au BufReadPost,BufNewFile *.?pp set ft=cpp

" mustache--"ignored" is preferable to default:
"   https://lists.gnu.org/archive/html/lmi/2017-10/msg00016.html
" for a plugin, see:
"   https://lists.gnu.org/archive/html/lmi/2017-10/msg00017.html
au BufReadPost,BufNewFile *.mst set ft=ignored

syntax on
set hlsearch

set spell spelllang=en_us

set wildmode=longest,longest,list:longest,full

set history=1000

set virtualedit=all
EOF

# Enable stable and security upgrades:

cat >/etc/apt/sources.list <<\EOF
deb http://deb.debian.org/debian/ buster main
deb http://deb.debian.org/debian/ buster-updates main
deb http://security.debian.org/   buster/updates main
EOF

# Apply any available upgrades:

apt-get update
apt-get upgrade
apt-get dist-upgrade

# Exit from the root shell in the chroot.
exit

# If cached lmi downloads are available elsewhere, copy them now.
# Copying cache_for_lmi/downloads/ is an optional step that merely
# conserves bandwidth. Directory cache_for_lmi/ in a native msw
# installation also contains cygwin files, which are not wanted in a
# chroot. For convenience, add a bare repository of proprietary files
# to this directory (after making sure it's up to date):
#   cp --dereference --preserve --recursive /WHEREVER/blessed /srv/cache_for_lmi
#   cp -a /srv/cache_for_lmi/* /srv/chroot/lmi-buster/cache_for_lmi/
# Also copy any desired msw software into the chroot now--but if it
# requires running an "install" program, postpone that until wine has
# been installed, below.

# Configure ssh, iff this chroot needs write access to savannah.
# The easiest way is to copy existing credentials, e.g.:
#   cp -a ~/.ssh/ /srv/chroot/lmi-buster/home/greg
# Make sure the .ssh/config file contains:
#   Protocol 2
#   HashKnownHosts no
# See the discussion of hashing (inter alia) here:
#   http://lists.nongnu.org/archive/html/lmi/2018-01/msg00003.html

# Enter the chroot as a normal user

schroot --chroot=lmi-buster

# Configure git. See:
#   http://lists.nongnu.org/archive/html/lmi/2016-03/msg00006.html
# Use your own name and email address.
git config --global user.name "Gregory W. Chicares"
git config --global user.email gchicares@sbcglobal.net
git config --global color.ui auto
git config --global pull.ff only
git config --global push.default simple
git config --global log.date iso8601-strict-local
git config --global log.follow true

# Initialize wine. See:
#   http://lists.nongnu.org/archive/html/lmi/2016-10/msg00002.html
WINEDLLOVERRIDES=mscoree=d wine wineboot

# Configure wine:

winecfg
# First, to make it usable in general ("Default Settings"):
#   on "Applications" tab, set "Windows Version" to "XP"
#   on "Graphics" tab, set DPI to 192

wine regedit
# HKCU\Control Panel\International:
#   set sShortDate and sLongDate to "yyyy-MM-dd"

# Troubleshoot wine:
#
# Later, to fix any application that gets the wrong X tab order:
# winecfg
#   "Applications": "add"; then
#   "Graphics": "Emulate virtual desktop"
#     specify appropriate size: e.g., 1900x1120 for a 1920x1200 monitor
#     (the other options don't seem to matter)
#   then restart the application

# Symlink directories used by lmi, so that both native and wine
# builds use the same directories and can share the same
# architecture-independent 'configurable_settings.xml'--much like the
# "identity mount" technique used with cygwin. See:
#   http://lists.nongnu.org/archive/html/lmi/2017-05/msg00018.html

mkdir -p ~/.wine/drive_c/users/greg/opt/
pushd ~/.wine/drive_c/users/greg/opt/
ln --symbolic --relative --force --no-dereference /opt/lmi/ ./lmi
popd

mkdir -p ~/.wine/drive_c/users/greg/etc/opt/
pushd ~/.wine/drive_c/users/greg/etc/opt/
ln --symbolic --relative --force --no-dereference /etc/opt/lmi/ ./lmi
popd

mkdir -p ~/.wine/drive_c/users/greg/var/opt/
pushd ~/.wine/drive_c/users/greg/var/opt/
ln --symbolic --relative --force --no-dereference /var/opt/lmi/ ./lmi
popd

# Install lmi for wine.

wget -N 'http://git.savannah.gnu.org/cgit/lmi.git/plain/install_msw.sh'
chmod +x install_msw.sh
./install_msw.sh >log 2>&1

# Now everything should work much as it does in native msw. To run an
# msw program, prefix its command line with 'wine'. Test the chroot by
# running the lmi binary built in the preceding step:

pushd /opt/lmi/bin
wine ./lmi_wx_shared.exe --ash_nazg --data_path=../data

# '--host' being 'i686-w64-mingw32', unit tests require an msw-native
# 'md5sum.exe'. Fortuitously, 'install_miscellanea.make' has installed
# one already, taking care to place it off $PATH so that it doesn't
# shadow a native 'md5sum' provided, e.g., by cygwin. However, in this
# chroot it cannot shadow the native GNU/Linux 'md5sum', so copy it to
# a directory that's on $WINEPATH to make unit tests work; it doesn't
# matter that this directory is also on $PATH. The file is tiny, so a
# copy isn't too wasteful, and wine doesn't find it if it's simply
# symlinked.

cp -a /opt/lmi/third_party/bin/md5sum.exe /opt/lmi/local/bin

# Symlink the repository's hooks/ directory:
cd /opt/lmi/src/lmi
mv .git/hooks .git/hooks-orig
ln --symbolic --force --no-dereference ../hooks .git

# Iff this chroot needs write access to savannah, then reconfigure
# the URL, using your savannah ID instead of mine:
# git remote set-url --push origin chicares@git.sv.gnu.org:/srv/git/lmi.git

# Duplicate proprietary repository (if available).
# First, copy "blessed" repository (here, 'cp' is sufficient: this
# bare repository has no references that need to be resolved):
cd /opt/lmi
cp --dereference --preserve --recursive /cache_for_lmi/blessed .
# Then create a working copy by cloning the bare repository...
git clone -b master file:///opt/lmi/blessed/proprietary
# ...and verify it:
cd proprietary
git rev-parse HEAD
# ...then symlink its hooks/ directory:
mv .git/hooks .git/hooks-orig
ln --symbolic --force --no-dereference ../hooks .git

# Create and populate the proprietary source directory used by 'vpath':
mkdir --parents /opt/lmi/src/products/src
cp -a /opt/lmi/proprietary/src /opt/lmi/src/products
# ...and the directories for system testing:
cp -a /opt/lmi/proprietary/test /opt/lmi
mkdir --parents /opt/lmi/touchstone
cp -a /opt/lmi/proprietary/test/* /opt/lmi/touchstone/

# Remove object files previously built without proprietary source:
rm /opt/lmi/src/build/lmi/Linux/gcc/ship/my*

# Regenerate the binary database:
cd /opt/lmi/data
rm proprietary.dat proprietary.ndx
wine /opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables

# Run a system test.
cd /opt/lmi/src/lmi
make $coefficiency system_test 2>&1 |less -S
# That test fails the first time because no results are saved in
# touchstone/ yet. Copy the results just generated...
cp -a /opt/lmi/test/* /opt/lmi/touchstone
# ...removing summaries...
rm /opt/lmi/touchstone/analysis* /opt/lmi/touchstone/diffs* /opt/lmi/touchstone/md5sum*
# ...and rerun the test, which should now succeed:
make $coefficiency system_test 2>&1 |less -S

# Create a local mirror of the gnu.org repository:
cd /opt/lmi
mkdir --parents free/src
cd free/src
git clone git://git.savannah.nongnu.org/lmi.git

# Exit the chroot.
exit

# Configure a file manager.
#
# A minimalist cross-building chroot wouldn't normally contain its own
# file manager--one in the host is enough. To set a bookmark into the
# chroot, add a line such as:
#   file:///srv/chroot/lmi-buster/opt/lmi/src/lmi
# to the GTK bookmarks file, which may be one of the following:
#   vim ~/.gtk-bookmarks
#   vim ~/.config/gtk-3.0/bookmarks

