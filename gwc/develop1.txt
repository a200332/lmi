  # Set up my customary working environment (prerequisite: 'develop0')

  # Work with multiple screens
  #
  # Only a few commands are used in each screen
  # often they're readily selectable from history

  # First screen: only for committing to repository

  # Initialize session

cd /opt/lmi/src/lmi

  [paste these lines individually...]
eval `ssh-agent`
ssh-agent $SHELL
ssh-add ~/.ssh/id_rsa
  [... then enter passphrase]

  # At end of session, terminate ssh so that no one can impersonate you

ssh-add -D
ssh-agent -k > /dev/null 2>&1

  # In between...
  # ...commit and push changes to git

git commit one_file another_file -m"One set of changes"
git commit --all -m"Another set of changes"
git push

  # ...commit a change to cvs repository

export CVS_RSH="ssh"
export CVSROOT="{USER}{AT_SIGN}cvs.sv.gnu.org:/web/lmi"
cvs commit -m "Modify foo webpage" bar.html

  # ...rename a file
  # [for git, prefer to rename a file without changing its contents]
  # [for cvs, add the new and delete the old]

git mv lmi.rc lmi_msw_res.rc

  # Make a patch against repository from local tree

git diff file0.cpp file1.cpp >/dev/clipboard
cvs diff -U3 file0.cpp file1.cpp >/dev/clipboard

  # Apply an email patch

git am --scissors /path/to/patch

  # Discard local changes to particular files

git checkout -- ce_skin_name.cpp ce_skin_name.hpp

  # Roll a file back to an earlier revision

git checkout [sha1sum] census_view.cpp
git checkout HEAD^ census_view.cpp

  # Update the local source tree (where I make my own changes) when
  # someone else has committed a change to the online master repo.

git remote -v update
git pull

  # Set local timestamps from RCS Id's, to match repository
  # (this should be necessary only if your clock is unsynchronized)
  #
  # This is slow, so consider specifying the names of changed files
  # instead of using '*' at the beginning
  #
  # ...for cvs:

for z in * ; do grep --directories=skip --quiet --files-with-matches '$Id:' $z && touch "--date=$(<$z sed -e'/$Id:/!d' |sed -e's/^.*\([0-9]\{4\}[0-9\/: ]*\) .*$/\1/')" $z && date -u +'%Y%m%dT%H%MZ' -r $z; done;

  # If msw sets an incorrect executable bit, and you accidentally
  # commit it (without first running 'make check_concinnity', which
  # would catch the error), fix it thus:

git update-index --chmod=+x some-file-name
git update-index --chmod=-x some-file-name

  # Second screen: only for updating local shadow copy of repository
  #
  # I use the last line repeatedly to keep my local shadow copy current

cd /lmi/mirror/lmi
git remote -v update
git pull

  # Similarly, for webpages repository

cd /lmi/mirror/web
export CVS_RSH="ssh"
export CVSROOT="{USER}{AT_SIGN}cvs.sv.gnu.org:/web/lmi"
cvs -z3 update -l lmi

  # Set mirror timestamps to match working directory's
  #
  # ...for git:

for z in * ; do [ -f $z ] && ( [ $z -nt /opt/lmi/src/lmi/$z ] || [ $z -ot /opt/lmi/src/lmi/$z ] ) && touch --reference=/opt/lmi/src/lmi/$z $z; done

  # But that's slow, so specify the files to change, thus:

for z in $(git diff HEAD^ --name-only) ; do touch --reference=/opt/lmi/src/lmi/$z $z; done

  # Third screen: only for building and testing

cd /opt/lmi/src/lmi

make $coefficiency install check_physical_closure >../log 2>&1
make $coefficiency cgi_tests cli_tests >../log 2>&1
make $coefficiency system_test >../log 2>&1
make $coefficiency unit_tests 2>&1 | tee >(grep '\*\*\*') >(grep '????') >(grep '!!!!' --count | xargs printf "%d tests succeeded\n") >../log

  # other build types

make $coefficiency all build_type=so_test USE_SO_ATTRIBUTES=1 2>&1 |less -S
make $coefficiency cgi_tests cli_tests build_type=safestdlib  2>&1 |less -S
make $coefficiency unit_tests build_type=safestdlib 2>&1 | tee >(grep '\*\*\*') >(grep '????') >(grep '!!!!' --count | xargs printf "%d tests succeeded\n") >../log

  # Run a single unit test

make $coefficiency unit_tests unit_test_targets=regex_test.exe >../log 2>&1

  # Build with a compiler other than gcc

make -f bcc_5_5_1.make $coefficiency unit_tests >../log 2>&1
make -f como.make $coefficiency unit_tests >../log 2>&1

  # Build wx and wxpdfdoc

make $coefficiency --output-sync=recurse -f install_wx.make >../log 2>&1
make $coefficiency --output-sync=recurse -f install_wxpdfdoc.make >../log 2>&1

  # Shift differing system-test files among directories:
cd /opt/lmi/touchstone
d="/opt/lmi/touchstone-old/touchstone-$(date -u +'%Y%m%dT%H%MZ')" && mkdir -p $d \
&& for z in *; do cmp --quiet $z ../test/$z || ( mv $z $d/$z; mv ../test/$z ./$z; ) ; done

  # Validate xrc files

export jar_dir=/opt/lmi/third_party/rng
java -jar $jar_dir/jing.jar -c xrc.rnc *.xrc 2>&1 |less -S -N

  # Expose menu-toolbar dissimilarities: expect zero lines on stdout

<toolbar.xrc sed -e'/^        /!d' -e'N;N;s/\n//g' -e's/^        //' -e's/tooltip/label/g' -e's/longhelp/help/g' |sort >/tmp/t.txt
<menus.xrc sed -e'/<label>/s/_//' -e'/<label>/s/\\t.*</</' -e '/^        <\(label\|bitmap\|help\)/!d' -e'N;N;s/\n//g' -e'/object/d' -e's/^        //' -e's/platform="win" //' -e's/Contents/Help/' -e's/\.\.\.</</' |sort | uniq >/tmp/m.txt
diff --unified=0 /tmp/m.txt /tmp/t.txt |sed -e'/^[+][+][+]/d' -e'/^@/d' -e'/^-/d'

  # Test xml schemata

pushd /tmp; /opt/lmi/src/lmi/test_schemata.sh >/opt/lmi/src/log 2>&1; popd

  # Fourth screen: only for checking

cd /opt/lmi/src/lmi

make $coefficiency check_concinnity >../log 2>&1
sed -f diagnostics.sed ../log 2>&1 |less -S

  # Copy date to clipboard for pasting

date -u +'%Y%m%dT%H%MZ' |tr -d '\n' >/dev/clipboard

  # Fifth screen: only for running lmi and its GUI tests

cd /opt/lmi/bin
./lmi_wx_shared --ash_nazg --data_path=/opt/lmi/data

  # Run GUI tests

./wx_test.exe --ash_nazg --data_path=/opt/lmi/data

  # Run a particular GUI test

./wx_test.exe --ash_nazg --data_path=/opt/lmi/data --test paste_census

  # Show tabbed-dialog dimensions on statusbar

./lmi_wx_shared --ash_nazg --data_path=/opt/lmi/data --pyx=show_mvc_dims

  # Test all valid emission types

pushd /opt/lmi/bin
./lmi_cli_shared --file=sample.ill --accept --ash_nazg --data_path=/opt/lmi/data --emit=emit_pdf_file,emit_test_data,emit_spreadsheet,emit_text_stream,emit_custom_0,emit_custom_1  2>&1 |less -S
./lmi_cli_shared --file=sample.cns --accept --ash_nazg --data_path=/opt/lmi/data --emit=emit_pdf_file,emit_test_data,emit_spreadsheet,emit_group_roster,emit_text_stream,emit_custom_0,emit_custom_1  2>&1 |less -S
popd

  # Miscellany (no particular screen)

cd /opt/lmi/src/lmi

  # Identify source files not encoded compatibly with UTF-8

for z in *.?pp; (iconv -f UTF-8 -t UTF-8 $z &>/dev/null || echo $z)

  # Convert to UTF-8

cp -a product_data.cpp eraseme
iconv -f ISO-8859-1 -t UTF-8 eraseme > product_data.cpp

  # Check spelling

http://lists.nongnu.org/archive/html/lmi/2015-10/msg00076.html
