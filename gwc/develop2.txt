  # Work with proprietary repository (prerequisite: 'develop0')
  #
  # Discussed in detail here:
  #   http://lists.nongnu.org/archive/html/lmi/2016-03/msg00031.html

  # Initial setup: create a working copy, cloned from the
  # already-provided "blessed" repo...

cd /opt/lmi
git clone file:///opt/lmi/blessed/proprietary

  # ...then symlink its hooks/ directory:

cd /opt/lmi/proprietary
mv .git/hooks .git/hooks-orig
ln --symbolic --force --no-dereference ../hooks .git

  # When migrating to a new machine, restore that symlink explicitly
  # in case the working copy was transferred by simplistic means:

cd /opt/lmi/proprietary
ln --symbolic --force --no-dereference ../hooks .git

  # Create a bundle to share by email

  # Make some changes, then run both the following sets of commands
  # before each and every commit:

  # (1) force permissions

cd /opt/lmi/proprietary
printf "forcing correct permissions "
  for d in src data test tables; do (\
       printf "$d..." \
    && find ./$d -maxdepth 1 -type f -not -name '*.sh' -not -name '*.sed' | xargs chmod -x \
  )done; \
printf "all permissions forced\n"

  # (2) test concinnity
  # (a pre-commit hook shows these commands' output, filtered)

cd /opt/lmi/proprietary/data/
cd ../data  ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../src   ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../test  ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../tables; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S

  # Commit the changes in whatever batches make sense

cd /opt/lmi/proprietary
  # [commit selected files by name...]
git commit one_file another_file -m"One set of changes"
  # [...or commit all changes]
git commit --all -m"Another set of changes"

  # When everything is ready to share...

cd /opt/lmi/proprietary
git bundle create YourBundleName origin/master..HEAD --branches
  # for example (substitute your own initials)
git bundle create /opt/lmi/blessed/$(date -u +'%Y%m%dT%H%MZ')-gwc.bundle origin/master..HEAD --branches

  # Email that bundle, then push the changes to your "blessed" repository

git push

  # When you receive a bundle in email...

cd /opt/lmi/proprietary
git bundle verify /path/where/you/saved/TheirBundleName
git pull /path/where/you/saved/TheirBundleName

  # ...then synchronize your "blessed" repository with your correspondent's

git push

  # Whenever a rate table changes, regenerate the binary database

cd /opt/lmi/data
rm proprietary.dat proprietary.ndx
  # native:
/opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables
  # msw cross build:
wine /opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables
