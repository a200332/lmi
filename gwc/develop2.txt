  # Work with proprietary repository (prerequisite: 'develop0')
  #
  # Discussed in detail here:
  #   http://lists.nongnu.org/archive/html/lmi/2016-03/msg00031.html

  # Initial setup: create a working copy, cloned from the
  # already-provided "blessed" repo...

cd /opt/lmi
git clone file:///opt/lmi/blessed/proprietary

  # ...then make sure it's set up as intended:

cd /opt/lmi/proprietary
./check_git_setup.sh

  # ...and do that also when migrating to a new machine, in case a
  # working copy was transferred by simplistic means.

  # Create a bundle to share by email

  # After verifying proper setup as above, make some changes, then
  # commit them in whatever batches make sense (see the section
  # "When committing fails" below if anything goes wrong)

cd /opt/lmi/proprietary
  # [commit selected files by name...]
git commit one_file another_file -m"One set of changes"
  # [...or commit all changes]
git commit --all -m"Another set of changes"

  # When everything is ready to share...

cd /opt/lmi/proprietary
git bundle create YourBundleName origin/master..HEAD --branches
  # for example (substitute your own initials)
git bundle create /opt/lmi/blessed/$(date -u +'%Y%m%dT%H%MZ')-gwc.bundle origin/master..HEAD --branches

  # Email that bundle, then push the changes to your "blessed" repository

git push

  # When you receive a bundle in email...

cd /opt/lmi/proprietary
git bundle verify /path/where/you/saved/TheirBundleName
git pull /path/where/you/saved/TheirBundleName

  # ...then synchronize your "blessed" repository with your correspondent's

git push

  # Whenever a rate table changes, regenerate the binary database

cd /opt/lmi/data
rm proprietary.dat proprietary.ndx
  # native:
/opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables
  # msw cross build:
wine /opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables

  # To recover from errors

  # As long as git hooks are set up correctly, every commit is tested
  # for common problems, and fails if any are found. Take these steps
  # to diagnose or fix such failures.

  # (1) Permissions may have been scrambled by msw (cygwin). Lines like
  #   mode change 100644 => 100755 data/sample.database
  # on the screen indicate such problems. For msw (cygwin) only, this
  # command:

git config --get-all core.filemode

  # should print the word "false", in which case this nightmare should
  # not occur.

  # To unscramble permissions if necessary, before committing do:

cd /opt/lmi/proprietary
printf "forcing correct permissions "
  for d in src data test tables; do (\
       printf "$d..." \
    && find ./$d -maxdepth 1 -type f -not -name '*.sh' -not -name '*.sed' | xargs chmod -x \
  )done; \
printf "all permissions forced\n"

  # (2) Test concinnity. The git pre-commit hook shows these commands'
  # output, filtered; these commands show the same thing, unfiltered
  # so that the diagnostics are easier to understand.

cd /opt/lmi/proprietary/data/
cd ../data  ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../src   ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../test  ; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S
cd ../tables; make srcdir=/opt/lmi/src/lmi -f /opt/lmi/src/lmi/GNUmakefile check_concinnity 2>&1 |less -S

